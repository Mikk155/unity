name: CI/CD

on:
  push:
    paths:
      - '.github/workflows/ci-cd.yml'

env:
  VERSION: 0.0.0
  USER: Mikk155
  REPOSITORY: unity
  BUILD_TYPE: Release
  GAME_NAME: Half-Life
  MOD_NAME: unity
  VCPKG_ROOT: ${{github.workspace}}/vcpkg

jobs:
  release:
    name: release
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Installing Python
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: release
      id: generated
      env:
        TOKEN: ${{ secrets.TOKEN }}
        VERSION: ${{ env.VERSION }}
        USER: ${{ env.USER }}
        REPOSITORY: ${{ env.REPOSITORY }}
        GAME_NAME: ${{ env.GAME_NAME }}
        MOD_NAME: ${{ env.MOD_NAME }}
      run: python3 build.py

  linux:
    needs: release
    name: Linux-x86
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Pre-Release
        if: success() && needs.release.outputs.generated
        run: echo "Waiting for release task."
          
      - name: Install G++ Multilib & 32 bit OpenGL library
        run: |
          sudo dpkg --add-architecture i386
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install -y g++-11-multilib libgcc-s1:i386 libstdc++6:i386 libatomic1:i386 libgl1-mesa-dev:i386
         
      - uses: lukka/get-cmake@latest
      
      - name: setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{env.VCPKG_ROOT}}'
          runVcpkgInstall: false
          vcpkgJsonIgnores: "['**/vcpkg/**', '**/vcpkg_config/**', '**/utils/**']"
         
      - name: Configure
        run: >
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.GAME_NAME}}/${{env.MOD_NAME}}
          -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/LinuxToolchain.cmake
        
      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j3
        
      - name: Install
        run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Zip Binaries
        run: zip -r Linux-x86 ${{ env.GAME_NAME }}

      - name: Release
        uses: xresloader/upload-to-github-release@v1.6.0
        with:
          file: Linux-x86.zip
          tag_name: ${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
          target_owner: ${{ env.USER }}
          target_repo: ${{ env.REPOSITORY }}
          prerelease: true
          tags: true
        
  win32:
    needs: release
    name: Win32
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Pre-Release
        if: success() && needs.release.outputs.generated
        run: echo "Waiting for release task."
      
      - uses: lukka/get-cmake@latest
      
      - name: setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{env.VCPKG_ROOT}}'
          runVcpkgInstall: false
          vcpkgJsonIgnores: "['**/vcpkg/**', '**/vcpkg_config/**', '**/utils/**']"
        
      - name: Configure
        run: >
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.GAME_NAME}}/${{env.MOD_NAME}}
          -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/WindowsToolchain.cmake -A Win32
        
      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j3
        
      - name: Install
        run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Zip Binaries
        run: |
          powershell Compress-Archive -Path ${{ env.GAME_NAME }} -DestinationPath Win32.zip

      - name: Release
        uses: xresloader/upload-to-github-release@v1.6.0
        with:
          file: Win32.zip
          tag_name: ${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
          target_owner: ${{ env.USER }}
          target_repo: ${{ env.REPOSITORY }}
          prerelease: true
          tags: true
